(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{1024:function(t,s,a){"use strict";a.r(s);var e=a(28),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("img",{attrs:{src:a(500),alt:""}})]),t._v(" "),e("p",[t._v("在不同的 React 模式下，State 的更新流程是不同的。在 React 18 中，可能会采用 concurrent 模式，会采用不同的 State 更新逻辑，这里我们先介绍 legacy 模式下的 State。")]),t._v(" "),e("h2",{attrs:{id:"类中的-state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类中的-state"}},[t._v("#")]),t._v(" 类中的 State")]),t._v(" "),e("p",[t._v("语法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("setState(obj, callback);\n")])])]),e("p",[t._v("当第一个参数传入的是一个对象的时候，这个对象就是合并的 state ; 如果是一个函数，需要将当前的 state 和 props 作为参数传进去，并返回一个新的 state ;")]),t._v(" "),e("p",[t._v("第二个参数是一个回调函数，可以立即获取最新的 state 。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("state 的更新流程：")]),t._v(" "),e("p",[t._v("触发 setState -> 计算 expirationTime -> 更新调度，调和 fiber 树 -> 合并 state，执行 render -> （commit阶段）替换真实 DOM -> 执行 callback 函数")]),t._v(" "),e("p",[t._v("在实际开发中，频繁的更新 state 对性能很不好，我们可以通过 pureComponent 、shouldComponentUpdate 进行优化。")]),t._v(" "),e("h2",{attrs:{id:"setstate的基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate的基本用法"}},[t._v("#")]),t._v(" setState的基本用法")]),t._v(" "),e("h2",{attrs:{id:"setstate的更新流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate的更新流程"}},[t._v("#")]),t._v(" setState的更新流程")]),t._v(" "),e("h2",{attrs:{id:"setstate-原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate-原理"}},[t._v("#")]),t._v(" setState 原理")]),t._v(" "),e("h2",{attrs:{id:"怎么实现批量更新的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么实现批量更新的"}},[t._v("#")]),t._v(" 怎么实现批量更新的")]),t._v(" "),e("p",[t._v("异步环境开启批量更新方法："),e("code",[t._v("unstable_batchedUpdates")])]),t._v(" "),e("p",[t._v("示例：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code")])]),e("p",[t._v("提高更新优先级别\nflushSync 函数可以将回调函数中的更新任务，放到一个较高的优先级中。")]),t._v(" "),e("p",[t._v("useState的用法")])])}),[],!1,null,null,null);s.default=n.exports},500:function(t,s,a){t.exports=a.p+"assets/img/1.e2b118f7.jpg"}}]);