(window.webpackJsonp=window.webpackJsonp||[]).push([[480],{1287:function(t,l,e){"use strict";e.r(l);var p=e(28),n=Object(p.a)({},(function(){var t=this,l=t.$createElement,e=t._self._c||l;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ul",[e("li",[e("p",[t._v("类型检测:在TS中为变量制定具体类型时，IDE会做出类型检测，这个特性减少在开发阶段犯错几率")])]),t._v(" "),e("li",[e("p",[t._v("语法提示:在IDE里编写TS代码时，IDE会根据当前的上下文把类、变量、方法和关键字都给你提示出来，提高开发效率")])]),t._v(" "),e("li",[e("p",[t._v("便于重构:修改变量或者方法的名字很边界，当你做出修改的时候，IDE会帮你自动引用这个变量或者调用这个方法的代码自动帮你修改")])]),t._v(" "),e("li",[e("p",[t._v("活跃社区:TS拥抱ES6的规范，也支持部分起草规范，大部分的第三方库提供TS类型定义的文件")])])]),t._v(" "),e("p",[t._v("TypeScript的最大特点是静态类型，不同于JavaScript的动态类型，静态类型有以下优势：")]),t._v(" "),e("p",[t._v("第一，静态类型检查可以做到early fail，编写的代码即使没有被执行到，但是发生类型不匹配的时候，语言在编译阶段(解释执行也一样),可以在运行前发现")]),t._v(" "),e("p",[t._v("第二，静态类型对阅读代码是友好的，针对大型应用，方法很多，调用关系复杂，不可能每个函数都有人编写细致的文档，所以静态类型就是非常重要的提示和约束。此外TS还实现了类、接口、美剧、泛型，方法重载等语法糖，方便前端开发")])])}),[],!1,null,null,null);l.default=n.exports}}]);